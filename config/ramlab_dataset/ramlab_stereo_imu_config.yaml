%YAML:1.0

#common parameters
#support: 1 imu 1 cam; 1 imu 2 cam: 2 cam; 
imu: 1         
num_of_cam: 2  

imu_topic: "/stim300/imu/data_raw"
image0_topic: "/stereo/frame_left/image_raw"
image1_topic: "/stereo/frame_right/image_raw"
output_path: "/home/cranesoar/output/"

cam0_calib: "cam0_pinhole.yaml"
cam1_calib: "cam1_pinhole.yaml"
image_width: 1024 #640
image_height: 768 #480
   

# Extrinsic parameter between IMU and Camera.
estimate_extrinsic: 0   # 0  Have an accurate extrinsic parameters. We will trust the following imu^R_cam, imu^T_cam, don't change it.
                        # 1  Have an initial guess about extrinsic parameters. We will optimize around your initial guess.

body_T_cam0: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [-0.0138,    0.0011,    0.9999, -0.019381,
          -0.9997,    0.0196,   -0.0138, 0.066447,
          -0.0196,   -0.9998,    0.0009, -0.077907,
           0, 0, 0, 1]

body_T_cam1: !!opencv-matrix
   rows: 4
   cols: 4
   dt: d
   data: [-0.0067,   -0.0101,    0.9999, -0.017886,
           -1.0000,   -0.0014,   -0.0067, -0.093388,
          0.0015,   -0.9999,   -0.0101, -0.078768,
          0, 0, 0, 1]

#Multiple thread support
multiple_thread: 1

#feature traker paprameters
max_cnt:  385          # max feature number in feature tracking    
min_dist:  18           # min distance between two features 
freq: 10                # frequence (Hz) of publish tracking result. At least 10Hz for good estimation. If set 0, the frequence will be same as raw image 
F_threshold: 1.0        # ransac threshold (pixel)
show_track: 1           # publish tracking image as topic
flow_back: 1            # perform forward and backward optical flow to improve feature tracking accuracy

#optimization parameters
max_solver_time: 0.04  # max solver itration time (ms), to guarantee real time
max_num_iterations: 8   # max solver itrations, to guarantee real time
keyframe_parallax: 10.0 # keyframe selection threshold (pixel)

#imu parameters       The more accurate parameters you provide, the better performance
# acc_n: 0.0011501915187049582         # accelerometer measurement noise standard deviation.  #04
# gyr_n: 5.084312924828687e-05           # gyroscope measurement noise standard deviation.     
# acc_w: 3.729854069064516e-05        # accelerometer bias random work noise standard deviation.  
# gyr_w: 6.509823412408377e-07       # gyroscope bias random work noise standard deviation.  
   
acc_n: 0.1          # accelerometer measurement noise standard deviation.   #00
gyr_n: 0.01         # gyroscope measurement noise standard deviation.     
acc_w: 0.001        # accelerometer bias random work noise standard deviation.  
gyr_w: 0.0001       # gyroscope bias random work noise standard deviation.

# acc_n: 0.0011501915187049582          # accelerometer measurement noise standard deviation. #03
# gyr_n: 5.084312924828687e-03          # gyroscope measurement noise standard deviation.     
# acc_w: 3.729854069064516e-05        # accelerometer bias random work noise standard deviation.  
# gyr_w: 6.509823412408377e-05       # gyroscope bias random work noise standard deviation.

# acc_n: 0.011501915187049582          # accelerometer measurement noise standard deviation. #02
# gyr_n: 5.084312924828687e-04          # gyroscope measurement noise standard deviation.     
# acc_w: 3.729854069064516e-04        # accelerometer bias random work noise standard deviation.  
# gyr_w: 6.509823412408377e-06       # gyroscope bias random work noise standard deviation.

# acc_n: 0.11501915187049582          # accelerometer measurement noise standard deviation.  #01
# gyr_n: 5.084312924828687e-03          # gyroscope measurement noise standard deviation.     
# acc_w: 3.729854069064516e-03        # accelerometer bias random work noise standard deviation.  
# gyr_w: 6.509823412408377e-05       # gyroscope bias random work noise standard deviation.  
   
g_norm: 9.81007     # gravity magnitude

#unsynchronization parameters
estimate_td: 1                      # online estimate time offset between camera and imu
td: 0                            # initial value of time offset. unit: s. readed image clock + td = real image clock (IMU clock)

#loop closure parameters
load_previous_pose_graph: 0        # load and reuse previous pose graph; load from 'pose_graph_save_path'
pose_graph_save_path: "/home/cranesoar/output/pose_graph/" # save and load path
save_image: 1                   # save image in pose graph for visualization prupose; you can close this function by setting 0 
